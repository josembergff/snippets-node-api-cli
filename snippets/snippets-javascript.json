{
  "Modelo padrão para o Mongoose": {
    "prefix": "snac-modelo-padraoMongoose",
    "body": [
      "'use strict';",
      "const mongoose = require('mongoose');",
      "const Schema = mongoose.Schema;",
      "",
      "const schema = new Schema({",
      "",
      "});",
      "",
      "module.exports = mongoose.model('$1', schema);"
    ],
    "description": "Criado o modelo para o mongoose"
  },
  "Parametros padrões para o mongoose": {
    "prefix": "snac-modelo-parametrosPadraoMongoose",
    "body": [
      "criacao: {",
      "type: Date,",
      "required: true,",
      "default: Date.now",
      "},",
      "edicao: {",
      "type: Date,",
      "required: false",
      "},",
      "criador: {",
      "type: mongoose.Schema.Types.ObjectId,",
      "ref: 'Usuario',",
      "required: true",
      "},",
      "editor: {",
      "type: mongoose.Schema.Types.ObjectId,",
      "ref: 'Usuario'",
      "}"
    ],
    "description": "Criado o modelo para o mongoose"
  },
  "Parametros padrão do mongoose": {
    "prefix": "snac-modelo-novoParametroMongoose",
    "body": [
      "$1: {",
      "type: $2,",
      "required: $3",
      "},"
    ],
    "description": "Criado o modelo para o mongoose"
  },
  "Repositório padrão genérico": {
    "prefix": "snac-repositorio-padraoMongoose",
    "body": [
      "'use strict';",
      "const mongoose = require('mongoose');",
      "let Modelo;",
      "let nomeModelo;",
      "",
      "exports.modelo = (modelo) => {",
      "Modelo = mongoose.model(modelo);",
      "nomeModelo = modelo;",
      "return Modelo;",
      "};",
      "",
      "exports.criar = async (data) => {",
      "var modelo = new Modelo(data);",
      "await modelo.save();",
      "return modelo.id;",
      "}",
      "",
      "exports.buscarId = async (id) => {",
      "const modelo = await Modelo.findById(id);",
      "return modelo;",
      "}",
      "",
      "exports.buscar = async (filtro) => {",
      "const modelo = await Modelo.findOne(filtro);",
      "return modelo;",
      "}",
      "",
      "exports.editar = async (id, data) => {",
      "return await Modelo.findByIdAndUpdate(id,",
      "{",
      "$set: data",
      "});",
      "}",
      "",
      "exports.excluir = async (id) => {",
      "await Modelo.findOneAndRemove(id);",
      "}",
      "",
      "exports.listagem = async (filtro, campos) => {",
      "const lista = await Modelo.find(filtro, campos);",
      "return lista;",
      "}",
      "",
      "exports.quantidade = async (filtro) => {",
      "const quantidade = await Modelo.count(filtro);",
      "return quantidade;",
      "}"
    ]
  },
  "Repositório novo da entidade com base no repositório genérico.": {
    "prefix": "snac-repositorio-novoComGenericoMongoose",
    "body": [
      "'use strict';",
      "",
      "const repositorioGenerico = require('./repositorio-generico');,",
      "const padrao = () => {",
      "repositorioGenerico.modelo('$1');",
      "return repositorioGenerico;",
      "};",
      "",
      "exports.padrao = padrao;"
    ]
  },
  "Rota padrão genérica.": {
    "prefix": "snac-rota-padrao",
    "body": [
      "'use strict';",
      "",
      "const express = require('express');",
      "const router = express.Router();",
      "const controle = require('../controles/controle-$1');",
      "const servicoAutenticacao = require('../servicos/servico-autenticacao');",
      "const controleRegistroCrud = require('../controles/controle-registro-crud');",
      "",
      "router.post('/', servicoAutenticacao.autorizar, controleRegistroCrud.cadastrarCriacao, controle.cadastrar);",
      "",
      "router.put('/:id', servicoAutenticacao.autorizar, controleRegistroCrud.cadastrarEdicao, controle.editar);",
      "",
      "router.delete('/:id', servicoAutenticacao.autorizar, controleRegistroCrud.cadastrarExclusao, controle.excluir);",
      "",
      "router.get('/', servicoAutenticacao.autorizar, controle.listar);",
      "",
      "router.get('/:id', servicoAutenticacao.autorizar, controle.buscarId);",
      "",
      "router.get('/dados/combo', servicoAutenticacao.autorizar, controle.combo);",
      "",
      "module.exports = router;"
    ]
  },
  "Configuração de modelo.": {
    "prefix": "snac-configuracao-modelo",
    "body": [
      "const $1 = require('./modelos/$1');"
    ]
  },
  "Configuração de rota.": {
    "prefix": "snac-configuracao-rota",
    "body": [
      "const rota$1 = require('./rotas/rota-$1');",
      "app.use('/$2', rota$1);"
    ]
  },
  "Configuração de modelo e rota.": {
    "prefix": "snac-configuracao-modeloERota",
    "body": [
      "const $1 = require('./modelos/$1');",
      "const rota$1 = require('./rotas/rota-$1');",
      "app.use('/$2', rota$1);"
    ]
  },
  "Controle padrão com base no respositório genérico.": {
    "prefix": "snac-controle-padrao",
    "body": [
      "'use strict';",
      "",
      "const repositorio$1 = require('../repositorios/repositorio-$1');",
      "",
      "const servicoAutenticacao = require('../servicos/servico-autenticacao');",
      "const enumAcoes = require('../enumeradores/enum-acoes');",
      "const validacoes = require('../validacoes/validacoes');",
      "",
      "exports.cadastrar = async (req, res, next) => {",
      "try {",
      "",
      "let validar = new validacoes();",
      "validar.tamanhoMinimo(req.body.nome, 3, 'O nome deve conter pelo menos 3 caracteres');",
      "// Se os dados forem inválidos",
      "if (!validar.valido()) {",
      "res.status(400).send(validar.erros()).end();",
      "return;",
      "}",
      "",
      "req.body.criador = await servicoAutenticacao.idUsuarioToken(req);",
      "await repositorio$1.padrao().criar(req.body);",
      "res.status(200).send({",
      "msg: '$2 cadastrado com sucesso!'",
      "});",
      "}",
      "catch (e) {",
      "res.status(500).send({",
      "msg: 'Falha ao salvar o $2.'",
      "});",
      "}",
      "};",
      "",
      "exports.editar = async (req, res, next) => {",
      "try {",
      "req.body.editor = await servicoAutenticacao.idUsuarioToken(req);",
      "await repositorio$1.padrao().editar(req.params.id, req.body);",
      "const $1 = await repositorio$1.buscarPorId(req.params.id);",
      "res.status(200).send($1);",
      "}",
      "catch (e) {",
      "res.status(500).send({",
      "msg: 'Falha ao editar o $2.',",
      "msgErro: e",
      "});",
      "}",
      "};",
      "",
      "exports.excluir = async (req, res, next) => {",
      "try {",
      "await repositorio$1.padrao().excluir(req.params.id);",
      "res.status(200).send({",
      "msg: '$2 excluído com sucesso!'",
      "});",
      "}",
      "catch (e) {",
      "res.status(500).send({",
      "msg: 'Falha ao excluír o $2.',",
      "msgErro: e",
      "});",
      "}",
      "};",
      "",
      "exports.combo = async (req, res, next) => {",
      "try {",
      "const idUsuario = await servicoAutenticacao.idUsuarioToken(req);",
      "const lista = await repositorio$1.listaCombo(idUsuario);",
      "res.status(200).send(lista);",
      "}",
      "catch (e) {",
      "res.status(500).send({",
      "msg: 'Falha ao buscar o combo de $2s.',",
      "msgErro: e",
      "});",
      "}",
      "};",
      "",
      "exports.listar = async (req, res, next) => {",
      "try {",
      "const idUsuario = await servicoAutenticacao.idUsuarioToken(req);",
      "const lista = await repositorio$1.listaGeral(idUsuario);",
      "res.status(200).send(lista);",
      "}",
      "catch (e) {",
      "res.status(500).send({",
      "msg: 'Falha ao listar os $2s.',",
      "msgErro: e",
      "});",
      "}",
      "};",
      "",
      "exports.buscarId = async (req, res, next) => {",
      "try {",
      "const idUsuario = await servicoAutenticacao.idUsuarioToken(req);",
      "const $1 = await repositorio$1.buscarPorId(req.params.id);",
      "res.status(200).send($1);",
      "}",
      "catch (e) {",
      "res.status(500).send({",
      "msg: 'Falha ao busca o $2.',",
      "msgErro: e",
      "});",
      "}",
      "};"
    ]
  }
}